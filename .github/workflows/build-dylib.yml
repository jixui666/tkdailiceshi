name: Build iOS Dylib

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    
    - name: Install Dependencies
      run: |
        # 安装必要工具
        brew install ldid dpkg make
        
    - name: Setup Theos
      run: |
        # 下载并安装Theos
        echo "=== Installing Theos ==="
        sudo git clone --recursive https://github.com/theos/theos.git /opt/theos
        sudo chown -R $(whoami) /opt/theos
        
        # 下载iOS SDK
        echo "=== Downloading iOS SDK ==="
        curl -LO https://github.com/theos/sdks/archive/master.zip
        unzip master.zip
        cp -r sdks-master/* /opt/theos/sdks/
        
        # 设置环境变量
        echo "THEOS=/opt/theos" >> $GITHUB_ENV
        echo "/opt/theos/bin" >> $GITHUB_PATH
        
        # 显示Theos信息
        echo "=== Theos Setup Complete ==="
        ls -la /opt/theos/
        ls -la /opt/theos/sdks/
    
    - name: Create Theos Makefile
      run: |
        # 为项目创建Makefile
        cat > Makefile << 'EOF'
        ARCHS = arm64
        TARGET = iphone:clang:16.5:12.0
        
        include $(THEOS)/makefiles/common.mk
        
        TWEAK_NAME = 1212
        
        1212_FILES = 模拟返回/wyURLProtocol.m
        1212_FRAMEWORKS = UIKit Foundation AVFoundation
        1212_LIBRARIES = z
        1212_CFLAGS = -fobjc-arc
        
        include $(THEOS)/makefiles/tweak.mk
        
        after-install::
        	install.exec "killall -9 SpringBoard"
        EOF
        
        echo "=== Generated Makefile ==="
        cat Makefile
    
    - name: Build with Theos
      run: |
        echo "=== Building with Theos ==="
        export THEOS=/opt/theos
        export PATH="/opt/theos/bin:$PATH"
        
        # 显示环境信息
        echo "THEOS: $THEOS"
        echo "PATH: $PATH"
        which make
        
        # 清理并构建
        make clean || echo "Clean failed, continuing..."
        make package DEBUG=0
        
        echo "=== Build completed ==="
        
        # 查找生成的文件
        echo "=== Looking for build products ==="
        find . -name "*.dylib" -o -name "*.deb" | head -10
        
        # 显示.theos目录内容
        echo "=== .theos directory ==="
        find .theos -type f 2>/dev/null | head -20 || echo ".theos not found"
    
    - name: Package Results
      run: |
        # 创建输出目录
        mkdir -p ./output
        
        # 查找dylib文件
        DYLIB_PATH=""
        if [ -f ".theos/obj/debug/1212.dylib" ]; then
          DYLIB_PATH=".theos/obj/debug/1212.dylib"
        elif [ -f ".theos/obj/1212.dylib" ]; then
          DYLIB_PATH=".theos/obj/1212.dylib"
        else
          DYLIB_PATH=$(find .theos -name "*.dylib" -type f | head -1)
        fi
        
        if [ -n "$DYLIB_PATH" ] && [ -f "$DYLIB_PATH" ]; then
          echo "✅ Found dylib at: $DYLIB_PATH"
          cp "$DYLIB_PATH" ./output/1212.dylib
          
          # 显示文件信息
          echo "=== Dylib Info ==="
          ls -la "$DYLIB_PATH"
          file "$DYLIB_PATH"
          
          # 签名dylib
          ldid -S ./output/1212.dylib
          echo "✅ Dylib signed successfully"
        else
          echo "❌ No dylib found, trying alternative approach..."
          
          # 尝试手动编译
          echo "=== Manual compilation ==="
          clang -arch arm64 \
                -dynamiclib \
                -isysroot $(xcrun --show-sdk-path --sdk iphoneos) \
                -mios-version-min=12.0 \
                -framework Foundation \
                -framework UIKit \
                -framework AVFoundation \
                -lz \
                -fobjc-arc \
                -o ./output/1212.dylib \
                模拟返回/wyURLProtocol.m
          
          if [ -f "./output/1212.dylib" ]; then
            echo "✅ Manual compilation successful"
            ldid -S ./output/1212.dylib
          else
            echo "❌ Manual compilation failed"
            exit 1
          fi
        fi
        
        # 查找deb包
        DEB_PATH=$(find . -name "*.deb" -type f | head -1)
        if [ -n "$DEB_PATH" ] && [ -f "$DEB_PATH" ]; then
          echo "✅ Found deb package: $DEB_PATH"
          cp "$DEB_PATH" ./output/1212.deb
        else
          echo "⚠️ No deb package found, creating manual package..."
          
          # 手动创建deb包
          if [ -d "BylibKjc/Package" ] && [ -f "./output/1212.dylib" ]; then
            mkdir -p BylibKjc/Package/Library/MobileSubstrate/DynamicLibraries/
            cp ./output/1212.dylib BylibKjc/Package/Library/MobileSubstrate/DynamicLibraries/
            
            # 创建deb包
            dpkg-deb -Zgzip -b BylibKjc/Package ./output/1212.deb
            echo "✅ Manual deb package created"
          fi
        fi
        
        # 显示最终结果
        echo "=== Final Output ==="
        ls -la ./output/
        
        # 验证文件
        if [ -f "./output/1212.dylib" ]; then
          echo "✅ dylib file ready"
          file ./output/1212.dylib
        fi
        
        if [ -f "./output/1212.deb" ]; then
          echo "✅ deb package ready"
          dpkg-deb -I ./output/1212.deb || echo "deb info unavailable"
        fi
    
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: iOS-Dylib-Build-${{ github.run_number }}
        path: |
          ./output/1212.dylib
          ./output/1212.deb
        retention-days: 30
    
    - name: Create Release
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: Release v${{ github.run_number }}
        body: |
          🚀 自动构建的iOS Dylib文件
          
          ## 📱 文件说明
          - `1212.dylib`: 编译好的动态库文件 (支持arm64)
          - `1212.deb`: Cydia安装包
          
          ## ✨ 功能特性
          - URL拦截和重定向
          - 支持iOS 12.0+
          - 使用Theos构建系统
          
          ## 📥 安装方法
          
          ### 方法一：安装deb包 (推荐)
          1. 下载 `1212.deb` 文件
          2. 使用Filza或SSH传输到设备
          3. 运行 `dpkg -i 1212.deb` 安装
          4. 重启SpringBoard: `killall -9 SpringBoard`
          
          ### 方法二：手动安装dylib
          1. 下载 `1212.dylib` 文件
          2. 复制到 `/Library/MobileSubstrate/DynamicLibraries/`
          3. 重启SpringBoard
          
          ## ⚙️ 构建信息
          - 构建时间: ${{ github.event.head_commit.timestamp }}
          - 提交SHA: ${{ github.sha }}
          - iOS部署目标: 12.0+
          - 架构支持: arm64
          - 构建工具: Theos + Clang
        files: |
          ./output/1212.dylib
          ./output/1212.deb
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 