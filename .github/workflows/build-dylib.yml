name: Build iOS Dylib

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    
    - name: Install Dependencies
      run: |
        # 安装必要工具
        brew install ldid dpkg
        
    - name: Show Environment Info
      run: |
        echo "=== Environment Information ==="
        xcodebuild -version
        xcrun --show-sdk-path --sdk iphoneos
        clang --version
        
        echo "=== Project Structure ==="
        ls -la
        find 模拟返回 -type f
        
    - name: Build Dylib with Clang
      run: |
        echo "=== Building dylib with clang ==="
        
        # 获取iOS SDK路径
        IOS_SDK=$(xcrun --show-sdk-path --sdk iphoneos)
        echo "iOS SDK Path: $IOS_SDK"
        
        # 创建输出目录
        mkdir -p ./output
        
        # 直接使用clang编译dylib
        clang -arch arm64 \
              -dynamiclib \
              -isysroot "$IOS_SDK" \
              -mios-version-min=12.0 \
              -framework Foundation \
              -framework UIKit \
              -framework AVFoundation \
              -lz \
              -fobjc-arc \
              -Xlinker -install_name \
              -Xlinker /Library/MobileSubstrate/DynamicLibraries/1212.dylib \
              -o ./output/1212.dylib \
              模拟返回/wyURLProtocol.m
        
        # 检查编译结果
        if [ -f "./output/1212.dylib" ]; then
          echo "✅ Compilation successful!"
          
          # 显示文件信息
          ls -la ./output/1212.dylib
          file ./output/1212.dylib
          
          # 显示dylib架构信息
          lipo -info ./output/1212.dylib || echo "lipo info not available"
          
          # 签名dylib
          echo "=== Signing dylib ==="
          ldid -S ./output/1212.dylib
          echo "✅ Dylib signed successfully"
          
        else
          echo "❌ Compilation failed"
          exit 1
        fi
    
    - name: Create Deb Package
      run: |
        echo "=== Creating deb package ==="
        
        if [ -f "./output/1212.dylib" ] && [ -d "BylibKjc/Package" ]; then
          # 准备包目录结构
          mkdir -p BylibKjc/Package/Library/MobileSubstrate/DynamicLibraries/
          
          # 复制dylib到包目录
          cp ./output/1212.dylib BylibKjc/Package/Library/MobileSubstrate/DynamicLibraries/
          
          # 显示包结构
          echo "Package structure:"
          find BylibKjc/Package -type f
          
          # 检查control文件
          if [ -f "BylibKjc/Package/DEBIAN/control" ]; then
            echo "Control file content:"
            cat BylibKjc/Package/DEBIAN/control
          else
            echo "⚠️ Warning: No control file found"
          fi
          
          # 创建deb包
          dpkg-deb -Zgzip -b BylibKjc/Package ./output/1212.deb
          
          if [ -f "./output/1212.deb" ]; then
            echo "✅ Deb package created successfully"
            ls -la ./output/1212.deb
            
            # 显示deb包信息
            dpkg-deb -I ./output/1212.deb || echo "deb info unavailable"
          else
            echo "❌ Failed to create deb package"
          fi
        else
          echo "❌ Cannot create deb package: missing dylib or package structure"
        fi
    
    - name: Verify Build Results
      run: |
        echo "=== Final Build Results ==="
        ls -la ./output/
        
        echo "=== Dylib Verification ==="
        if [ -f "./output/1212.dylib" ]; then
          echo "✅ 1212.dylib: $(file ./output/1212.dylib)"
          echo "Size: $(ls -lh ./output/1212.dylib | awk '{print $5}')"
          
          # 尝试获取更多信息
          otool -L ./output/1212.dylib 2>/dev/null || echo "otool not available"
        else
          echo "❌ 1212.dylib not found"
        fi
        
        echo "=== Deb Package Verification ==="
        if [ -f "./output/1212.deb" ]; then
          echo "✅ 1212.deb: $(file ./output/1212.deb)"
          echo "Size: $(ls -lh ./output/1212.deb | awk '{print $5}')"
        else
          echo "❌ 1212.deb not found"
        fi
    
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: iOS-Dylib-Build-${{ github.run_number }}
        path: |
          ./output/1212.dylib
          ./output/1212.deb
        retention-days: 30
    
    - name: Create Release
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: Release v${{ github.run_number }}
        body: |
          🚀 自动构建的iOS Dylib文件
          
          ## 📱 文件说明
          - `1212.dylib`: 编译好的动态库文件 (arm64架构)
          - `1212.deb`: Cydia安装包
          
          ## ✨ 功能特性
          - URL拦截和重定向 (wyURLProtocol)
          - 支持iOS 12.0+
          - 使用Clang直接编译
          - 无需MonkeyDev/Theos环境
          
          ## 📥 安装方法
          
          ### 方法一：安装deb包 (推荐)
          ```bash
          # 下载并安装
          dpkg -i 1212.deb
          
          # 重启SpringBoard
          killall -9 SpringBoard
          ```
          
          ### 方法二：手动安装dylib
          ```bash
          # 复制到目标目录
          cp 1212.dylib /Library/MobileSubstrate/DynamicLibraries/
          
          # 重启SpringBoard
          killall -9 SpringBoard
          ```
          
          ## 🔧 技术细节
          - **架构**: arm64
          - **最低iOS版本**: 12.0
          - **依赖框架**: Foundation, UIKit, AVFoundation
          - **编译器**: Clang (Xcode)
          - **签名工具**: ldid
          
          ## ⚙️ 构建信息
          - 构建时间: ${{ github.event.head_commit.timestamp }}
          - 提交SHA: ${{ github.sha }}
          - 构建编号: #${{ github.run_number }}
        files: |
          ./output/1212.dylib
          ./output/1212.deb
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 