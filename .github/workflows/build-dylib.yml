name: Build iOS Dylib

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    
    - name: Install Dependencies
      run: |
        # 安装签名工具
        brew install ldid
        
        # 安装dpkg-deb用于创建deb包
        brew install dpkg
        
    - name: Debug Project Structure
      run: |
        echo "=== Project Structure ==="
        ls -la
        echo "=== Xcode Project Info ==="
        xcodebuild -list -project 654323.xcodeproj || echo "Failed to list project info"
        echo "=== Available Schemes ==="
        xcodebuild -project 654323.xcodeproj -list || echo "No schemes found"
        
    - name: Setup Build Environment
      run: |
        # 创建必要的目录结构
        sudo mkdir -p /opt/theos
        sudo chown -R $(whoami) /opt/theos
        
        # 下载iOS SDK (使用较小的SDK)
        echo "Downloading iOS SDK..."
        curl -LO https://github.com/theos/sdks/archive/master.zip
        unzip master.zip
        mkdir -p /opt/theos/sdks
        cp -r sdks-master/* /opt/theos/sdks/
        
        # 显示可用的SDK
        echo "Available SDKs:"
        ls -la /opt/theos/sdks/
        
        # 设置环境变量
        echo "THEOS=/opt/theos" >> $GITHUB_ENV
        echo "/opt/theos/bin" >> $GITHUB_PATH
        
    - name: Build Project
      run: |
        # 显示Xcode版本信息
        echo "=== Xcode Version ==="
        xcodebuild -version
        
        # 显示可用的SDK
        echo "=== Available iOS SDKs ==="
        xcodebuild -showsdks | grep iOS
        
        # 清理项目
        echo "=== Cleaning Project ==="
        xcodebuild clean -project 654323.xcodeproj -scheme 1212 || echo "Clean failed, continuing..."
        
        # 尝试不同的构建方法
        echo "=== Building Project (Method 1: with scheme) ==="
        xcodebuild -project 654323.xcodeproj \
                   -scheme 1212 \
                   -configuration Release \
                   -derivedDataPath ./build \
                   -destination "generic/platform=iOS" \
                   IPHONEOS_DEPLOYMENT_TARGET=12.0 \
                   CODE_SIGNING_ALLOWED=NO \
                   CODE_SIGN_IDENTITY="" \
                   PROVISIONING_PROFILE="" \
                   ARCHS="arm64" \
                   VALID_ARCHS="arm64" \
                   build || {
          echo "Method 1 failed, trying Method 2..."
          
          echo "=== Building Project (Method 2: target based) ==="
          xcodebuild -project 654323.xcodeproj \
                     -target 1212 \
                     -configuration Release \
                     -derivedDataPath ./build \
                     IPHONEOS_DEPLOYMENT_TARGET=12.0 \
                     CODE_SIGNING_ALLOWED=NO \
                     CODE_SIGN_IDENTITY="" \
                     PROVISIONING_PROFILE="" \
                     ARCHS="arm64" \
                     VALID_ARCHS="arm64" \
                     build || {
            echo "Method 2 failed, trying Method 3..."
            
            echo "=== Building Project (Method 3: simple build) ==="
            xcodebuild -project 654323.xcodeproj \
                       -configuration Release \
                       IPHONEOS_DEPLOYMENT_TARGET=12.0 \
                       CODE_SIGNING_ALLOWED=NO \
                       build || {
              echo "All build methods failed, showing detailed error info..."
              echo "=== Build Directory Contents ==="
              find . -name "*.log" -exec cat {} \;
              exit 1
            }
          }
        }
    
    - name: Package Dylib
      run: |
        # 查找生成的dylib文件
        echo "=== Looking for dylib files ==="
        find . -name "*.dylib" -type f || echo "No dylib files found"
        
        # 显示完整的build目录结构
        echo "=== Complete Build Directory Structure ==="
        find ./build -type f 2>/dev/null | head -50 || echo "Build directory not found"
        
        # 也检查当前目录下的构建产物
        echo "=== Current Directory Build Products ==="
        find . -name "*.dylib" -o -name "*.a" -o -name "*.framework" | head -20
        
        # 创建输出目录
        mkdir -p ./output
        
        # 尝试多个可能的路径来找到dylib文件
        DYLIB_PATH=""
        
        # 可能的路径列表
        POSSIBLE_PATHS=(
          "./build/Build/Products/Release-iphoneos/1212.dylib"
          "./build/Build/Products/Release/1212.dylib"
          "./build/Release-iphoneos/1212.dylib"
          "./build/Release/1212.dylib"
          "./Release-iphoneos/1212.dylib"
          "./Release/1212.dylib"
        )
        
        for path in "${POSSIBLE_PATHS[@]}"; do
          if [ -f "$path" ]; then
            DYLIB_PATH="$path"
            echo "Found dylib at: $DYLIB_PATH"
            break
          fi
        done
        
        # 如果还没找到，尝试通过find命令查找
        if [ -z "$DYLIB_PATH" ]; then
          DYLIB_PATH=$(find . -name "*.dylib" -type f | head -1)
        fi
        
        if [ -n "$DYLIB_PATH" ] && [ -f "$DYLIB_PATH" ]; then
          echo "✅ Successfully found dylib at: $DYLIB_PATH"
          cp "$DYLIB_PATH" ./output/1212.dylib
          
          # 显示dylib文件信息
          echo "=== Dylib File Info ==="
          ls -la "$DYLIB_PATH"
          file "$DYLIB_PATH"
          
          # 签名dylib文件
          echo "=== Signing dylib ==="
          ldid -S ./output/1212.dylib
          
          # 创建deb包
          if [ -d "BylibKjc/Package" ]; then
            echo "=== Creating deb package ==="
            # 确保目标目录存在
            mkdir -p BylibKjc/Package/Library/MobileSubstrate/DynamicLibraries/
            cp ./output/1212.dylib BylibKjc/Package/Library/MobileSubstrate/DynamicLibraries/
            
            # 显示包结构
            echo "Package structure:"
            find BylibKjc/Package -type f
            
            # 创建deb包
            dpkg-deb -Zgzip -b BylibKjc/Package ./output/BylibKjc.deb
            
            echo "✅ Deb package created successfully"
          fi
          
          # 显示最终输出文件
          echo "=== Final Output Files ==="
          ls -la ./output/
          
        else
          echo "❌ Error: Could not find dylib file"
          echo "=== Debug Information ==="
          echo "Searched paths:"
          for path in "${POSSIBLE_PATHS[@]}"; do
            echo "  $path - $([ -f "$path" ] && echo "EXISTS" || echo "NOT FOUND")"
          done
          echo "=== All .dylib files in project ==="
          find . -name "*.dylib" -type f || echo "No dylib files found anywhere"
          echo "=== All files in build directory ==="
          find ./build -type f 2>/dev/null || echo "Build directory not accessible"
          exit 1
        fi
    
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: iOS-Dylib-Build-${{ github.run_number }}
        path: |
          ./output/1212.dylib
          ./output/BylibKjc.deb
        retention-days: 30
    
    - name: Create Release
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: Release v${{ github.run_number }}
        body: |
          🚀 自动构建的iOS Dylib文件
          
          ## 📱 文件说明
          - `1212.dylib`: 编译好的动态库文件 (支持arm64)
          - `BylibKjc.deb`: Cydia安装包
          
          ## 📥 安装方法
          
          ### 方法一：安装deb包
          1. 下载 `BylibKjc.deb` 文件
          2. 使用Filza或SSH传输到设备
          3. 运行 `dpkg -i BylibKjc.deb` 安装
          
          ### 方法二：手动安装dylib
          1. 下载 `1212.dylib` 文件
          2. 复制到 `/Library/MobileSubstrate/DynamicLibraries/`
          3. 重启SpringBoard
          
          ## ⚙️ 构建信息
          - 构建时间: ${{ github.event.head_commit.timestamp }}
          - 提交SHA: ${{ github.sha }}
          - iOS部署目标: 12.0+
          - 架构支持: arm64
        files: |
          ./output/1212.dylib
          ./output/BylibKjc.deb
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 