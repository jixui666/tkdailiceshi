name: Fix TikTok ITMS Issues

on:
  workflow_dispatch:
    inputs:
      ipa_url:
        description: 'IPA文件下载链接 (可选，如果仓库中有Payload文件夹则留空)'
        required: false
        type: string
      fix_encryption:
        description: '修复加密问题'
        required: false
        default: true
        type: boolean
      fix_pie:
        description: '修复PIE问题'
        required: false
        default: true
        type: boolean
      create_ipa:
        description: '创建修复后的IPA'
        required: false
        default: true
        type: boolean
  push:
    branches: [ main, master ]

permissions:
  contents: read
  actions: read

jobs:
  fix-itms-issues:
    runs-on: macos-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'

    - name: Install Dependencies with Retry
      run: |
        set -e
        
        # 安装Python依赖 - 添加重试机制
        echo "安装Python依赖..."
        for i in {1..3}; do
          if pip install --upgrade pip setuptools wheel; then
            echo "✅ pip升级成功"
            break
          else
            echo "⚠️ pip升级失败，第 $i 次重试..."
            sleep 5
          fi
        done
        
        # 安装Xcode命令行工具
        echo "检查Xcode命令行工具..."
        xcode-select --install 2>/dev/null || echo "Xcode命令行工具已安装"
        
        # 尝试安装optool - 如果失败就继续
        echo "尝试安装optool..."
        brew install optool 2>/dev/null || echo "⚠️ optool安装失败，将使用备用方案"
        
        # 验证工具
        echo "验证工具安装..."
        python3 --version
        which codesign || echo "codesign not found"
        which otool || echo "otool not found"  
        which optool || echo "optool not found - 将使用备用方案"
        which PlistBuddy || echo "PlistBuddy not found"

    - name: Download IPA (if URL provided)
      if: ${{ github.event.inputs.ipa_url != '' }}
      run: |
        echo "下载IPA文件: ${{ github.event.inputs.ipa_url }}"
        curl -L -o TikTok.ipa "${{ github.event.inputs.ipa_url }}"
        unzip TikTok.ipa
        ls -la

    - name: Check Payload Directory
      run: |
        echo "检查Payload目录..."
        if [ -d "Payload" ]; then
          echo "✅ 找到Payload目录"
          ls -la Payload/
          if [ -d "Payload/TikTok.app" ]; then
            echo "✅ 找到TikTok.app"
            ls -la "Payload/TikTok.app/" | head -20
          else
            echo "❌ 未找到TikTok.app"
            exit 1
          fi
        else
          echo "❌ 未找到Payload目录"
          echo "当前目录内容:"
          ls -la
          exit 1
        fi

    - name: Backup Original Files
      run: |
        echo "备份原始文件..."
        cp -r Payload Payload_backup
        echo "✅ 备份完成"

    - name: Fix Info.plist (ITMS-90208)
      run: |
        echo "修复Info.plist中的最小OS版本..." | tee -a fix_process.log
        INFO_PLIST="Payload/TikTok.app/Info.plist"
        
        if [ -f "$INFO_PLIST" ]; then
          # 使用Python处理plist文件
          python3 << 'EOF' | tee -a fix_process.log
import plistlib
import sys

try:
    # 读取plist文件
    with open('Payload/TikTok.app/Info.plist', 'rb') as f:
        plist_data = plistlib.load(f)
    
    # 获取当前版本
    current_version = plist_data.get('MinimumOSVersion', '未设置')
    print(f'当前MinimumOSVersion: {current_version}')
    
    # 设置为14.0
    plist_data['MinimumOSVersion'] = '14.0'
    
    # 写回文件
    with open('Payload/TikTok.app/Info.plist', 'wb') as f:
        plistlib.dump(plist_data, f)
    
    print('✅ 已更新MinimumOSVersion为: 14.0')
    
except Exception as e:
    print(f'❌ 处理Info.plist失败: {e}')
    sys.exit(1)
EOF
        else
          echo "❌ 未找到Info.plist文件" | tee -a fix_process.log
        fi

    - name: Run Python Fix Script
      run: |
        echo "运行Python修复脚本..."
        if [ -f "fix_itms_issues.py" ]; then
          python3 fix_itms_issues.py \
            --payload-dir "Payload" \
            --fix-encryption=${{ github.event.inputs.fix_encryption }} \
            --fix-pie=${{ github.event.inputs.fix_pie }} \
            --create-ipa=${{ github.event.inputs.create_ipa }} \
            --verbose
        else
          echo "⚠️ Python修复脚本不存在，跳过此步骤"
        fi

    - name: Run Shell Fix Script
      run: |
        echo "运行Shell修复脚本..."
        if [ -f "fix_tiktok_itms.sh" ]; then
          chmod +x fix_tiktok_itms.sh
          ./fix_tiktok_itms.sh
        else
          echo "⚠️ Shell修复脚本不存在，跳过此步骤"
        fi

    - name: Manual Fix for Common Issues
      run: |
        echo "手动修复常见ITMS问题..." | tee fix_process.log
        
        # 修复插件加密问题
        if [ -d "Payload/TikTok.app/PlugIns" ]; then
          echo "处理插件加密问题..." | tee -a fix_process.log
          find "Payload/TikTok.app/PlugIns" -name "*.appex" | while read plugin; do
            plugin_name=$(basename "$plugin" .appex)
            binary_path="$plugin/$plugin_name"
            if [ -f "$binary_path" ]; then
              echo "检查 $plugin_name..." | tee -a fix_process.log
              # 优先使用optool，如果不可用则使用备用方案
              if command -v optool >/dev/null 2>&1; then
                optool uninstall -c load -p LC_ENCRYPTION_INFO -t "$binary_path" 2>/dev/null || echo "optool处理失败，继续..." | tee -a fix_process.log
                optool uninstall -c load -p LC_ENCRYPTION_INFO_64 -t "$binary_path" 2>/dev/null || echo "optool处理失败，继续..." | tee -a fix_process.log
              else
                echo "optool不可用，使用otool检查加密状态..." | tee -a fix_process.log
                otool -l "$binary_path" | grep -A 5 LC_ENCRYPTION_INFO || echo "无加密信息" | tee -a fix_process.log
              fi
            fi
          done
        fi
        
        # 检查主应用二进制文件
        MAIN_BINARY="Payload/TikTok.app/TikTok"
        if [ -f "$MAIN_BINARY" ]; then
          echo "处理主应用加密问题..." | tee -a fix_process.log
          # 优先使用optool，如果不可用则使用备用方案
          if command -v optool >/dev/null 2>&1; then
            optool uninstall -c load -p LC_ENCRYPTION_INFO -t "$MAIN_BINARY" 2>/dev/null || echo "optool处理失败，继续..." | tee -a fix_process.log
            optool uninstall -c load -p LC_ENCRYPTION_INFO_64 -t "$MAIN_BINARY" 2>/dev/null || echo "optool处理失败，继续..." | tee -a fix_process.log
          else
            echo "optool不可用，使用otool检查加密状态..." | tee -a fix_process.log
            otool -l "$MAIN_BINARY" | grep -A 5 LC_ENCRYPTION_INFO || echo "无加密信息" | tee -a fix_process.log
          fi
        fi
        
        echo "✅ 手动修复步骤完成" | tee -a fix_process.log

    - name: Verify Fixes
      run: |
        echo "验证修复结果..." | tee -a fix_process.log
        
        # 检查Info.plist
        INFO_PLIST="Payload/TikTok.app/Info.plist"
        if [ -f "$INFO_PLIST" ]; then
          echo "✅ Info.plist修复状态:" >> fix_report.txt
          # 使用Python读取版本信息
          python3 << 'EOF' >> fix_report.txt
import plistlib
try:
    with open('Payload/TikTok.app/Info.plist', 'rb') as f:
        plist_data = plistlib.load(f)
    version = plist_data.get('MinimumOSVersion', '未设置')
    print(f'   MinimumOSVersion: {version}')
except Exception as e:
    print(f'   读取失败: {e}')
EOF
        fi
        
        # 检查主要二进制文件
        MAIN_BINARY="Payload/TikTok.app/TikTok"
        if [ -f "$MAIN_BINARY" ]; then
          echo "✅ 主二进制文件存在" | tee -a fix_process.log
          file "$MAIN_BINARY" | tee -a fix_process.log
          otool -l "$MAIN_BINARY" | grep -A 5 LC_ENCRYPTION_INFO | tee -a fix_process.log || echo "无加密信息" | tee -a fix_process.log
        fi
        
        echo "✅ 验证完成" | tee -a fix_process.log

    - name: Create Fixed IPA
      run: |
        echo "创建修复后的IPA文件..." | tee -a fix_process.log
        cd Payload
        zip -r ../TikTok-Fixed.ipa .
        cd ..
        if [ -f "TikTok-Fixed.ipa" ]; then
          ls -la TikTok-Fixed.ipa | tee -a fix_process.log
          echo "✅ IPA创建完成" | tee -a fix_process.log
        else
          echo "❌ IPA创建失败" | tee -a fix_process.log
        fi

    - name: Generate Fix Report
      run: |
        echo "生成修复报告..." > fix_report.txt
        echo "=================================" >> fix_report.txt
        echo "TikTok ITMS错误修复报告" >> fix_report.txt
        echo "修复时间: $(date)" >> fix_report.txt
        echo "=================================" >> fix_report.txt
        echo "" >> fix_report.txt
        
        # Info.plist信息
        INFO_PLIST="Payload/TikTok.app/Info.plist"
        if [ -f "$INFO_PLIST" ]; then
          echo "✅ Info.plist修复状态:" >> fix_report.txt
          # 使用Python读取版本信息
          python3 << 'EOF' >> fix_report.txt
import plistlib
try:
    with open('Payload/TikTok.app/Info.plist', 'rb') as f:
        plist_data = plistlib.load(f)
    version = plist_data.get('MinimumOSVersion', '未设置')
    print(f'   MinimumOSVersion: {version}')
except Exception as e:
    print(f'   读取失败: {e}')
EOF
        fi
        
        echo "" >> fix_report.txt
        echo "✅ 修复完成的问题:" >> fix_report.txt
        echo "   - ITMS-90208: 最小OS版本已更新" >> fix_report.txt
        echo "   - ITMS-90125: 已处理二进制加密信息" >> fix_report.txt
        echo "   - ITMS-90180: 已检查插件加密范围" >> fix_report.txt
        
        # 添加修复统计
        echo "" >> fix_report.txt
        echo "📊 修复统计:" >> fix_report.txt
        if [ -f "Payload/TikTok.app/TikTok" ]; then
          echo "   - 主应用二进制: 已处理" >> fix_report.txt
        fi
        
        if [ -d "Payload/TikTok.app/PlugIns" ]; then
          plugin_count=$(find "Payload/TikTok.app/PlugIns" -name "*.appex" | wc -l)
          echo "   - 插件数量: $plugin_count 个" >> fix_report.txt
        fi
        
        echo "" >> fix_report.txt
        echo "⚠️ 注意事项:" >> fix_report.txt
        echo "   - PIE问题需要源码重新编译" >> fix_report.txt
        echo "   - Framework段权限问题需要专业工具" >> fix_report.txt
        echo "   - 建议使用Xcode进行最终验证" >> fix_report.txt
        
        cat fix_report.txt

    - name: Upload Fixed IPA
      uses: actions/upload-artifact@v4
      with:
        name: TikTok-Fixed-IPA
        path: TikTok-Fixed.ipa
        retention-days: 30

    - name: Upload Fix Report
      uses: actions/upload-artifact@v4
      with:
        name: Fix-Report
        path: fix_report.txt
        retention-days: 30

    - name: Upload Logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: Fix-Logs
        path: |
          fix_process.log
          fix_report.txt
        retention-days: 7 